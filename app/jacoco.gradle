apply plugin: 'jacoco'

//To include robolectric test in the Jacoco report
android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def unitTestTaskName = "test${sourceName.capitalize()}UnitTest"
            def connectedTestTaskName = "connected${sourceName.capitalize()}AndroidTest"
            if (productFlavorName == "prod" && buildTypeName == "release") {
                connectedTestTaskName = "connectedAndroidTest"
            }

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${unitTestTaskName}Coverage"(type: JacocoReport) {
                dependsOn "$unitTestTaskName"
                //dependsOn "$connectedTestTaskName"
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName} build."

                def fileFilter = ['**/R.class',
                                  '**/R$*.class',
                                  '**/*$ViewInjector*.*',
                                  '**/*$ViewBinder*.*',
                                  '**/*Factory*.class',
                                  '**/*Provider*.class',
                                  '**/*_MembersInjector.class',
                                  '**/BuildConfig.*',
                                  '**/Manifest*.*',
                                  '**/*Lambda*.*',
                                  '**/model/*',
                                  '**/databinding/*',
                                  '**/dagger/*',
                                  '**/injection/*.*',
                                  '**/*ViewBinding*.*',
                                  '**/android/databinding/*',
                                  '**/*AutoValue*.*',
                                  '**/*$*.class']

                def sourcePathTree = fileTree(dir: "${buildDir}/intermediates/classes/${sourcePath}", excludes: fileFilter)
                def kotlinSourcePathTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${sourcePath}", excludes: fileFilter)


                classDirectories = files([sourcePathTree], [kotlinSourcePathTree])

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

                reports {
                    xml.enabled = true
                    xml.destination = new File("${buildDir}/reports/jacoco/jacocoTestReport.xml")
                    html.enabled = true
                    html.destination = new File("${buildDir}/reports/jacoco")
                }
            }
        }
    }
}

jacoco {
    toolVersion = '0.8.0'
}
